---
name: generate-workflow
'on':
  workflow_dispatch:

jobs:
  
  generate:
    name: Generate workflow
    if: ${{ github.repository_owner == 'rpardini' }}
    runs-on: [ "self-hosted", "Linux", 'armbian', "matrix-prepare" ]
    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:
      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: grab the sha1 of the latest commit # do NOT use set-output, it's deprecated. https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
        id: latest-commit
        run: echo "sha1=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: GitHub cache
        id: cache-restore
        uses: actions/cache@v3
        with:
          path: |
            cache/memoize
            cache/oci/positive
          key: ${{ runner.os }}-matrix-cache-${{ github.sha }}-${{ steps.latest-commit.outputs.sha1 }}"
          restore-keys: |
            ${{ runner.os }}-matrix-cache-
      
      # Login to ghcr.io, we're gonna do a lot of OCI lookups.
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Armbian workflow
        id: prepare-matrix
        run: |
          bash ./compile.sh workflow rpardini-generic CHECK_UP_TO_DATE_ARTIFACTS=no # DEBUG=yes

      - name: chown cache memoize/oci back to normal user
        run: |
          sudo chown -R $USER:$USER cache/memoize cache/oci/positive

      - name: cleanup
        run: |
          rm -rf release-repo

      - name: checkout release repo
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/armbian-release
          ref: main
          path: release-repo
          token: ${{ secrets.PAT_FOR_ARMBIAN_RELEASE_WORKFLOW }} # so we can push workflow _and_ trigger it!

      - name: copy workflow to build-targets.yaml # build-targets.yaml 
        run: |
          cp -v output/info/gha-workflow.yaml release-repo/.github/workflows/build-targets.yaml 

      # pushing the workflow will trigger itself, since this is done with a PAT
      - name: commit and push generated workflow
        uses: EndBug/add-and-commit@v9
        id: commit
        with:
          author_name: Workflow Bot
          author_email: bot@armbian.com
          message: workflow for ${{ steps.latest-commit.outputs.sha1 }}
          add: '.github/workflows/build-targets.yaml'
          cwd: release-repo
        # output: commit_long_sha

      - name: Remove release checkout dir
        run: |
          rm -rf release-repo
    
    outputs:
      commit_long_sha: ${{ steps.commit.outputs.commit_long_sha }}
  
  