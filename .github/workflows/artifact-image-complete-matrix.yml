name: artifact-image-complete-matrix

on:
  schedule:
    - cron: '0 1 * * *' # Scheduled runs every day at 2am UTC
  workflow_dispatch:


jobs:
  
  matrix_prep:
    if: ${{ github.repository_owner == 'rpardini' }}
    # runs-on: "ubuntu-latest" # "macos-latest" # is mac faster? not really. 
    runs-on: [ "self-hosted", "Linux", 'armbian', "matrix-prepare" ]
    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:
      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: grab the sha1 of the latest commit # do NOT use set-output, it's deprecated. https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
        id: latest-commit
        run: echo "sha1=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: GitHub cache
        id: cache-restore
        uses: actions/cache@v3
        with:
          path: |
            cache/memoize
            cache/oci/positive
          key: ${{ runner.os }}-matrix-cache-${{ github.sha }}-${{ steps.latest-commit.outputs.sha1 }}"
          restore-keys: |
            ${{ runner.os }}-matrix-cache-
      
      #- name: Prepare MacOS Machine
      #  id: prepare-machine-macos
      #  run: |
      #    brew install bash coreutils git docker
      #    colima start
      
      # Login to ghcr.io, we're gonna do a lot of OCI lookups.
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Prepare Info JSON and Matrices
        id: prepare-matrix
        run: |
          # this sets outputs "artifact-matrix" #and "image-matrix" 
          bash ./compile.sh matrix rpardini-generic CLEAN_INFO=yes CLEAN_MATRIX=yes MATRIX_ARTIFACT_CHUNKS=10 MATRIX_IMAGE_CHUNKS=10 CHECK_OCI=yes TARGETS_FILENAME=targets-all-cli-rpardini.yaml IMAGES_ONLY_OUTDATED_ARTIFACTS=yes SKIP_IMAGES=yes # DEBUG=yes

      - name: chown cache memoize/oci back to normal user
        run: |
          sudo chown -R $USER:$USER cache/memoize cache/oci/positive

      - name: echo stuff artifact
        run: |
          echo '${{ steps.prepare-matrix.outputs.artifact-matrix }}' | jq --color-output .

      - name: echo stuff image
        run: |
          echo '${{ steps.prepare-matrix.outputs.image-matrix }}' | jq --color-output .

      - name: Prepare GH Release
        uses: "marvinpinto/action-automatic-releases@latest" # @TODO this is outdated, needs replacement. Also it deletes the release if it already exists, which is not what we want. Might be necessary to move the tag.
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest-images"
          prerelease: false
          title: "Latest images"
    
    outputs:
      artifact: ${{ steps.prepare-matrix.outputs.artifact-matrix }}
      image: ${{ steps.prepare-matrix.outputs.image-matrix }}

  build-artifacts-chunk1: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk1 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk2: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk2 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk3: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk3 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk4: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk4 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk5: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk5 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk6: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk6 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk7: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk7 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk8: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk8 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk9: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk9 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-artifacts-chunk10: # <-- HERE: Chunk number.
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact).chunk10 }} # <-- HERE: Chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        id: build
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  # -------------------- images ------------------------------------------

  build-images-chunk1: # <-- HERE: Image chunk number.
    needs: [ "matrix_prep", "build-artifacts-chunk1", "build-artifacts-chunk2", "build-artifacts-chunk3", "build-artifacts-chunk4", "build-artifacts-chunk5", "build-artifacts-chunk6", "build-artifacts-chunk7", "build-artifacts-chunk8", "build-artifacts-chunk9", "build-artifacts-chunk10" ] # <-- HERE: all artifact chunk numbers.
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image).chunk1 }} # <-- HERE: Image chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Cleanup leftover output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20230400-${{ github.repository_owner }}" ${{env.EXTRA}}

      # @TODO lets upload to GHR release ourselves instead of this shit
      - name: Release ${{ matrix.board }}
        id: release1
        if: ${{matrix.really == 'yes'}}
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: ${{matrix.really == 'yes' && steps.release1.outcome == 'failure'}}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION


  build-images-chunk2: # <-- HERE: Image chunk number.
    needs: [ "matrix_prep", "build-artifacts-chunk1", "build-artifacts-chunk2", "build-artifacts-chunk3", "build-artifacts-chunk4", "build-artifacts-chunk5", "build-artifacts-chunk6", "build-artifacts-chunk7", "build-artifacts-chunk8", "build-artifacts-chunk9", "build-artifacts-chunk10" ] # <-- HERE: all artifact chunk numbers.
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image).chunk2 }} # <-- HERE: Image chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Cleanup leftover output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20230400-${{ github.repository_owner }}" ${{env.EXTRA}}

      # @TODO lets upload to GHR release ourselves instead of this shit
      - name: Release ${{ matrix.board }}
        id: release1
        if: ${{matrix.really == 'yes'}}
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: ${{matrix.really == 'yes' && steps.release1.outcome == 'failure'}}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION


  build-images-chunk3: # <-- HERE: Image chunk number.
    needs: [ "matrix_prep", "build-artifacts-chunk1", "build-artifacts-chunk2", "build-artifacts-chunk3", "build-artifacts-chunk4", "build-artifacts-chunk5", "build-artifacts-chunk6", "build-artifacts-chunk7", "build-artifacts-chunk8", "build-artifacts-chunk9", "build-artifacts-chunk10" ] # <-- HERE: all artifact chunk numbers.
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image).chunk3 }} # <-- HERE: Image chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Cleanup leftover output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20230400-${{ github.repository_owner }}" ${{env.EXTRA}}

      # @TODO lets upload to GHR release ourselves instead of this shit
      - name: Release ${{ matrix.board }}
        id: release1
        if: ${{matrix.really == 'yes'}}
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: ${{matrix.really == 'yes' && steps.release1.outcome == 'failure'}}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION


  build-images-chunk4: # <-- HERE: Image chunk number.
    needs: [ "matrix_prep", "build-artifacts-chunk1", "build-artifacts-chunk2", "build-artifacts-chunk3", "build-artifacts-chunk4", "build-artifacts-chunk5", "build-artifacts-chunk6", "build-artifacts-chunk7", "build-artifacts-chunk8", "build-artifacts-chunk9", "build-artifacts-chunk10" ] # <-- HERE: all artifact chunk numbers.
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image).chunk4 }} # <-- HERE: Image chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Cleanup leftover output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20230400-${{ github.repository_owner }}" ${{env.EXTRA}}

      # @TODO lets upload to GHR release ourselves instead of this shit
      - name: Release ${{ matrix.board }}
        id: release1
        if: ${{matrix.really == 'yes'}}
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: ${{matrix.really == 'yes' && steps.release1.outcome == 'failure'}}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION


  build-images-chunk5: # <-- HERE: Image chunk number.
    needs: [ "matrix_prep", "build-artifacts-chunk1", "build-artifacts-chunk2", "build-artifacts-chunk3", "build-artifacts-chunk4", "build-artifacts-chunk5", "build-artifacts-chunk6", "build-artifacts-chunk7", "build-artifacts-chunk8", "build-artifacts-chunk9", "build-artifacts-chunk10" ] # <-- HERE: all artifact chunk numbers.
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image).chunk5 }} # <-- HERE: Image chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Cleanup leftover output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20230400-${{ github.repository_owner }}" ${{env.EXTRA}}

      # @TODO lets upload to GHR release ourselves instead of this shit
      - name: Release ${{ matrix.board }}
        id: release1
        if: ${{matrix.really == 'yes'}}
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: ${{matrix.really == 'yes' && steps.release1.outcome == 'failure'}}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION


  build-images-chunk6: # <-- HERE: Image chunk number.
    needs: [ "matrix_prep", "build-artifacts-chunk1", "build-artifacts-chunk2", "build-artifacts-chunk3", "build-artifacts-chunk4", "build-artifacts-chunk5", "build-artifacts-chunk6", "build-artifacts-chunk7", "build-artifacts-chunk8", "build-artifacts-chunk9", "build-artifacts-chunk10" ] # <-- HERE: all artifact chunk numbers.
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image).chunk6 }} # <-- HERE: Image chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Cleanup leftover output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20230400-${{ github.repository_owner }}" ${{env.EXTRA}}

      # @TODO lets upload to GHR release ourselves instead of this shit
      - name: Release ${{ matrix.board }}
        id: release1
        if: ${{matrix.really == 'yes'}}
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: ${{matrix.really == 'yes' && steps.release1.outcome == 'failure'}}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION


  build-images-chunk7: # <-- HERE: Image chunk number.
    needs: [ "matrix_prep", "build-artifacts-chunk1", "build-artifacts-chunk2", "build-artifacts-chunk3", "build-artifacts-chunk4", "build-artifacts-chunk5", "build-artifacts-chunk6", "build-artifacts-chunk7", "build-artifacts-chunk8", "build-artifacts-chunk9", "build-artifacts-chunk10" ] # <-- HERE: all artifact chunk numbers.
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image).chunk7 }} # <-- HERE: Image chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Cleanup leftover output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20230400-${{ github.repository_owner }}" ${{env.EXTRA}}

      # @TODO lets upload to GHR release ourselves instead of this shit
      - name: Release ${{ matrix.board }}
        id: release1
        if: ${{matrix.really == 'yes'}}
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: ${{matrix.really == 'yes' && steps.release1.outcome == 'failure'}}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION


  build-images-chunk8: # <-- HERE: Image chunk number.
    needs: [ "matrix_prep", "build-artifacts-chunk1", "build-artifacts-chunk2", "build-artifacts-chunk3", "build-artifacts-chunk4", "build-artifacts-chunk5", "build-artifacts-chunk6", "build-artifacts-chunk7", "build-artifacts-chunk8", "build-artifacts-chunk9", "build-artifacts-chunk10" ] # <-- HERE: all artifact chunk numbers.
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image).chunk8 }} # <-- HERE: Image chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Cleanup leftover output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20230400-${{ github.repository_owner }}" ${{env.EXTRA}}

      # @TODO lets upload to GHR release ourselves instead of this shit
      - name: Release ${{ matrix.board }}
        id: release1
        if: ${{matrix.really == 'yes'}}
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: ${{matrix.really == 'yes' && steps.release1.outcome == 'failure'}}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION


  build-images-chunk9: # <-- HERE: Image chunk number.
    needs: [ "matrix_prep", "build-artifacts-chunk1", "build-artifacts-chunk2", "build-artifacts-chunk3", "build-artifacts-chunk4", "build-artifacts-chunk5", "build-artifacts-chunk6", "build-artifacts-chunk7", "build-artifacts-chunk8", "build-artifacts-chunk9", "build-artifacts-chunk10" ] # <-- HERE: all artifact chunk numbers.
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image).chunk9 }} # <-- HERE: Image chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Cleanup leftover output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20230400-${{ github.repository_owner }}" ${{env.EXTRA}}

      # @TODO lets upload to GHR release ourselves instead of this shit
      - name: Release ${{ matrix.board }}
        id: release1
        if: ${{matrix.really == 'yes'}}
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: ${{matrix.really == 'yes' && steps.release1.outcome == 'failure'}}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION


  build-images-chunk10: # <-- HERE: Image chunk number.
    needs: [ "matrix_prep", "build-artifacts-chunk1", "build-artifacts-chunk2", "build-artifacts-chunk3", "build-artifacts-chunk4", "build-artifacts-chunk5", "build-artifacts-chunk6", "build-artifacts-chunk7", "build-artifacts-chunk8", "build-artifacts-chunk9", "build-artifacts-chunk10" ] # <-- HERE: all artifact chunk numbers.
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image).chunk10 }} # <-- HERE: Image chunk number.
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Cleanup leftover output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20230400-${{ github.repository_owner }}" ${{env.EXTRA}}

      # @TODO lets upload to GHR release ourselves instead of this shit
      - name: Release ${{ matrix.board }}
        id: release1
        if: ${{matrix.really == 'yes'}}
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: ${{matrix.really == 'yes' && steps.release1.outcome == 'failure'}}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          tag_name: latest-images
          files: |
            output/images/*.xz

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rfv output/images userpatches/VERSION



