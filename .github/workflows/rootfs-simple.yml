name: rootfs-simple

on:
  #schedule:
  #  - cron: '0 1 * * *' # Scheduled runs every day at 1am UTC
  workflow_dispatch:
  workflow_call:


jobs:

  "R": # short name because GH will expand with the matrix values
    if: ${{ github.repository_owner == 'rpardini' }}
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix:

        # this matrix is not enough:
        # we might build desktops for one arch, but not for the another: "riscv gets no desktops"
        # we might build "just a CLI" for a given one release: "lunar gets no desktops"
        # so JSON generator (which is TODO) will have to generate matrix.include pre-expanded
        # also, any GHA matrix is risky, since they are limited to 256 jobs.
        # in rootfs case, we can manage using a workflow_call per-release, but that would split the logic in two jobs

        # - "BUILD_DESKTOP....=whatever DESKTOP_..._APPGROUPS=none"
        # suggestion: create extension for each desktop combo instead of long incantation
        include:
          # Kinetic CLI
          - release: "kinetic"
            arch: "arm64"
            runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-arm64" ]
            variant: ""  # no real variant, it's just a CLI
          - release: "kinetic"
            arch: "armhf"
            runner_tags: ubuntu-latest # gh runner, to use hosted: runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-armhf" ]
            variant: ""  # no real variant, it's just a CLI
          - release: "kinetic"
            arch: "amd64"
            runner_tags: "ubuntu-latest" # GH hosted runner
            variant: ""  # no real variant, it's just a CLI

          # Kinetic cloud (arm64/amd64 only)
          - release: "kinetic"
            arch: "arm64"
            runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-arm64" ]
            variant: "EXT=cloud-init,more_like_ubuntu_cloud"
          - release: "kinetic"
            arch: "amd64"
            runner_tags: "ubuntu-latest" # GH hosted runner
            variant: "EXT=cloud-init,more_like_ubuntu_cloud"

          # Jammy CLI
          - release: "jammy"
            arch: "arm64"
            runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-arm64" ]
            variant: ""  # no real variant, it's just a CLI
          - release: "jammy"
            arch: "armhf"
            runner_tags: ubuntu-latest # gh runner, to use hosted: runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-armhf" ]
            variant: ""  # no real variant, it's just a CLI
          - release: "jammy"
            arch: "amd64"
            runner_tags: "ubuntu-latest" # GH hosted runner
            variant: ""  # no real variant, it's just a CLI
          
          # Jammy Desktop Cinnamon, browsers appgroup, (arm64/amd64 only)
          - release: "jammy"
            arch: "arm64"
            runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-arm64" ]
            variant: "CLOUD_IMAGE=no BUILD_DESKTOP=yes DESKTOP_APPGROUPS_SELECTED=browsers DESKTOP_ENVIRONMENT=cinnamon DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"
          - release: "jammy"
            arch: "amd64"
            runner_tags: "ubuntu-latest" # GH hosted runner
            variant: "CLOUD_IMAGE=no BUILD_DESKTOP=yes DESKTOP_APPGROUPS_SELECTED=browsers DESKTOP_ENVIRONMENT=cinnamon DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"
          
          # jammy cloud (arm64/amd64 only)
          - release: "jammy"
            arch: "arm64"
            runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-arm64" ]
            variant: "EXT=cloud-init,more_like_ubuntu_cloud"
          - release: "jammy"
            arch: "amd64"
            runner_tags: "ubuntu-latest" # GH hosted runner
            variant: "EXT=cloud-init,more_like_ubuntu_cloud"

          # bookworm CLI
          - release: "bookworm"
            arch: "arm64"
            runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-arm64" ]
            variant: ""  # no real variant, it's just a CLI
          - release: "bookworm"
            arch: "armhf"
            runner_tags: ubuntu-latest # gh runner, to use hosted: runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-armhf" ]
            variant: ""  # no real variant, it's just a CLI
          - release: "bookworm"
            arch: "amd64"
            runner_tags: "ubuntu-latest" # GH hosted runner
            variant: ""  # no real variant, it's just a CLI
          # Bookworm Desktop Cinnamon, browsers appgroup, (arm64/amd64 only)
          - release: "bookworm"
            arch: "arm64"
            runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-arm64" ]
            variant: "CLOUD_IMAGE=no BUILD_DESKTOP=yes DESKTOP_APPGROUPS_SELECTED=browsers DESKTOP_ENVIRONMENT=cinnamon DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"
          - release: "bookworm"
            arch: "amd64"
            runner_tags: "ubuntu-latest" # GH hosted runner
            variant: "CLOUD_IMAGE=no BUILD_DESKTOP=yes DESKTOP_APPGROUPS_SELECTED=browsers DESKTOP_ENVIRONMENT=cinnamon DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"
          # bookworm cloud (arm64/amd64 only)
          - release: "bookworm"
            arch: "arm64"
            runner_tags: [ "self-hosted", "Linux", 'armbian', "rootfs-arm64" ]
            variant: "EXT=cloud-init,more_like_ubuntu_cloud"
          - release: "bookworm"
            arch: "amd64"
            runner_tags: "ubuntu-latest" # GH hosted runner
            variant: "EXT=cloud-init,more_like_ubuntu_cloud"

    runs-on: "${{ matrix.runner_tags }}"
    name: "${{ matrix.release }} ${{ matrix.arch }} (${{ matrix.variant }})"
    env:
      RELEASE: "${{ matrix.release }}"
      ARCH: "${{ matrix.arch }}"
      VARIANT: "${{ matrix.variant }}"
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically

      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inbookworme.

      - name: Create rootfs ${{env.RELEASE}}:${{env.ARCH}} (variant ${{env.VARIANT}})
        id: rootfs
        run: |
          bash ./compile.sh rootfs "RELEASE=${{env.RELEASE}}" "ARCH=${{env.ARCH}}" ${{env.VARIANT}} SKIP_ARMBIAN_REPO=yes  rpardini-generic
